.. include:: ../LINKS.rst


调研
==============

首先, 仅仅支持3条命令的应答系统,当然是玩具!


.. _fig_3_1:
.. figure:: ../_static/figs/chaos3-1-how2draw1horse.jpg

   插图 3-1 所有电脑入门书都是这么叙述编程的


一个真正,稳固,可用的业务系统,哪怕是最最最简单的应答系统,
也是要经过无数细节以及反复思考/尝试/重来,才可能令自个儿满意的!

问题
---------------------------------

比如,作为一个技术社区的公众号,日常一般主要交互形式,就是每日一篇精挑选或是撰写的文章,
时间长了,对于新订阅的成员,老文章怎么查阅就成为一个常见的问题:

- 虽然可以从历史文章中翻出来
- 但是,要翻很久才可能看到想看的,怎么可以快速的通过标题来选择查阅?

好吧,就针对这一个简单的公众号需求应该完成哪些功能呢?


方案
---------------------------------

按照成员使用的顺序来设想一下:

1. 支持比如: ``s`` 的新指令
2. 输出所有文章的分类列表
3. 接受成员的分类选择
4. 输出该分类下的所有文章标题...嗯嗯嗯,以及编号吧
5. 接受成员文章编号的选择
6. 输出对应文章的链接

嗯嗯嗯? 好象完成了?

- 那,成员,在过程中离开了,或是不想继续了可以退出这个查阅过程嘛?
- 文章是每日增补的,链接/标题什么的信息,怎么维护? 
- 如果想迁移系统了,积累的文章信息可以备份出来嘛?
- 或是,在意外情况下,可以远程上传备份恢复所有文章分类,以及编号信息嘛?
- ...

好吧,这种设想可以无穷无尽下去,但是,在 Pythonic 世界,我们的对策是:

    进行中开火!


资源
---------------------------------

即,一边快速实现理解到的功能,经过真实的操作, 修订要求,一点点完善,
让所有设想,都是可真实运行起来,使用起来,再调整...

另外, Pythonner 的自信源自 Pythonic 世界,一切都有现成的解决方案/模块/库, 嘦我们找的到,理解的起来,用的对!

所以,仅仅使用  wecaht 就可以搜索出来相关的支持模块,比如:

- `twinsant/pyweixin <https://github.com/twinsant/pyweixin>`_
- `jeffkit/wechat <https://github.com/jeffkit/wechat>`_

但是,具体是否能用,怎么用,,,




.. warning:: (^o^)

    先走起!

