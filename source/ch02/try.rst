.. include:: ../LINKS.rst


27:42" 重构
============================

根据文档, `SAE`_ 目前的服务基本覆盖了所有Web应用所需要的功能，包括：

- MySQL （分布式数据库服务，通过RDC提供）
- Memcache （分布式缓存服务）
- Storage（分布式文件存储服务）
- KVDB（分布式key-value持久化存储）
- Cron（分布式定时服务）
- Image（分布式图像处理服务）
- FetchURL（分布式网页抓取服务）
- Mail（分布式邮件服务）
- TaskQueue（异步轻量级任务队列）
- DeferredJob（异步大任务延迟队列）
- Counter（分布式计数器服务）
- Rank（实时排行榜服务）
...





调试
-----------------




服务端日志
-----------------------------

好在 `SAE`_ 毕竟是商用 `PaaS`_ 服务! 当然有渠道可以观察的!

.. _fig_2_1:
.. figure:: ../_static/figs/chaos2-1-log.png

   插图 2-1 配合后台日志中心进行调试

如截屏所示...

- 每个版本的应用,都有具专用的日志收集渠道
- 日志的收集等级也详细分成5级
- 代码中的 `print` 调试信息,收集在 `debug` 级别日志通道中,,,

::

    print "kv.get(uri)~ type=%s var=%s"%(type(v),v)
                            |       |
                            |       +------------------------------------+
                            +------------------------------+             |
                                                           V             V
    [26/Apr/2012:14:31:56 +0800] kv.get(uri)~ type=<type 'NoneType'> var=None yf34 


对照调试代码,立即可以知道, `.get()` 在没有获取键值时,返回的是 `None`



**BaZINga**



42:01" 小结
---------------------------------

~ 这一处增强,纯粹是根据文档配合后台日志,尝试几个回和而已,一刻钟,整出来不难吧?

- 但是,过程中的心理冲突,绝对不轻
- 比如,文档中未言明的各种细节, 是否重要? 怎么测试确认?
- 怎么设计 `print` 点输出的格式,以便从后台日志中明确的识别出?
- 等等,都需要补课,老实查阅文档,认真领悟,大胆尝试,建立靠谱的思路和反应,,,

不过,整体上,只要思路明确,方向正确,真心只是个轻松的过程而已,,,


.. note:: `KVDB`_ 的 `key`

    - 因为 `KVDB`_ 按文档吼,是对 `memcached`_ 接口的精简仿制;
    - 所以,根据 `Very long URL aliases not correctly cached in memcache <http://2bits.com/articles/very-long-url-aliases-not-correctly-cached-memcache.html>`_  等相关文章的分享,如果使用原样儿 URL 作 `key` 很可能出问题...
    - 笔者就曾经通过后台日志确认,只要使用正常的 URL 作 `key` 是保存不进 `KVDB`_ 的,
    - 于是使用 `urlsafe_b64encode(uri)` 进行处理就好...
    - 可是,没有想到 `SAE`_ 日新月异的发展中,现在再试,居然,平静的接受了! `叫声好!`


